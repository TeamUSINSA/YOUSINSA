<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="mapper.user">
	<insert id="insertUser" parameterType="user">
		insert into user
		(user_id,password,name,phone,email,birth)
		values(#{userId},#{password},#{name},#{phone},#{email},#{birth})
	</insert>

	<select id="selectUser" parameterType="String" resultType="user">
		select * from user where user_id=#{userId}
	</select>



	<select id="isDuplicateId" parameterType="string"
		resultType="int">
		SELECT COUNT(*) FROM user WHERE user_id = #{userId}
	</select>


	<update id="updateSingleField" parameterType="map">
		UPDATE user
		SET
		<choose>
			<when test="column == 'name'"> name = #{value} </when>
			<when test="column == 'phone'"> phone = #{value} </when>
			<when test="column == 'email'"> email = #{value} </when>
			<when test="column == 'birth'"> birth = #{value} </when>
		</choose>
		WHERE user_id = #{userId}
	</update>


	<select id="loginUser" parameterType="map"
		resultType="dto.user.User">
		SELECT user_id, name
		FROM User
		WHERE user_id = #{userId} AND
		password = #{password}
	</select>


	<select id="findUserId" parameterType="map" resultType="string">
		SELECT
		user_id
		FROM User
		WHERE name = #{name}
		AND email = #{email}
		AND phone =
		#{phone}
		LIMIT 1
	</select>




	<select id="findUserForPasswordReset" resultType="user">
		SELECT *
		FROM
		User
		WHERE name = #{name}
		AND user_id = #{userId}
		AND email = #{email}
	</select>



	<update id="withdrawUser" parameterType="user">
		update user
		set deleted =
		#{deleted, jdbcType=BOOLEAN},
		withdrawal_reason = #{withdrawalReason},
		withdrawal_detail = #{withdrawalDetail}
		where user_id = #{userId}
	</update>

	<update id="updateUserPassword" parameterType="map">
		UPDATE user
		SET
		password = #{newPassword}
		WHERE user_id = #{userId}
	</update>

	<select id="selectLikedProducts" resultType="likelist">
		SELECT l.like_id AS
		likeId,
		l.product_id AS productId,
		l.user_id AS userId,
		p.name,
		p.price,
		p.main_image1 AS mainImage1,
		p.description1 AS detail
		FROM likelist l
		JOIN product p ON l.product_id = p.product_id
		WHERE l.user_id =
		#{userId}
		ORDER BY l.like_id DESC
		LIMIT #{limit} OFFSET #{offset}
	</select>

	<select id="countLikedProducts" resultType="int">
		SELECT COUNT(*) FROM
		likelist WHERE user_id = #{userId}
	</select>

	<select id="findById" parameterType="String" resultType="user">
		SELECT * FROM user WHERE user_id = #{userId}
	</select>

	<select id="findByMemberNo" parameterType="int"
		resultType="user">
		SELECT * FROM user WHERE member_no = #{memberNo}
	</select>

	<select id="selectAllInquiries" resultType="dto.user.Inquiry">
		SELECT * FROM inquiry ORDER BY question_date DESC
	</select>

	<select id="selectInquiryById" resultType="dto.user.Inquiry"
		parameterType="int">
		SELECT * FROM inquiry WHERE inquiry_id = #{inquiryId}
	</select>

	<insert id="insertInquiry" parameterType="dto.user.Inquiry">
		INSERT INTO inquiry (title, content, user_id, type, status, question_date,
		product_id)
		VALUES (#{title}, #{content}, #{userId}, #{type}, #{status},
		#{questionDate}, #{productId})
	</insert>

	<update id="updateInquiryAnswer" parameterType="map">
		UPDATE inquiry SET answer = #{answer}, status = '답변 완료' WHERE inquiry_id =
		#{inquiryId}
	</update>

</mapper>