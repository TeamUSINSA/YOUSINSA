<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="mapper.user">
	<insert id="insertUser" parameterType="user">
		insert into user
		(user_id,password,name,phone,email,birth)
		values(#{userId},#{password},#{name},#{phone},#{email},#{birth})
	</insert>

	<select id="selectUserByUserId" parameterType="string"
		resultType="dto.user.User">
		SELECT * FROM user WHERE user_id = #{userId}
	</select>

	<select id="selectUser" parameterType="String" resultType="user">
		select * from user where user_id=#{userId}
	</select>

	<select id="isDuplicateId" parameterType="string"
		resultType="int">
		SELECT COUNT(*) FROM user WHERE user_id = #{userId}
	</select>

	<update id="updateSingleField" parameterType="map">
		UPDATE user
		SET
		<choose>
			<when test="column == 'name'"> name = #{value} </when>
			<when test="column == 'phone'"> phone = #{value} </when>
			<when test="column == 'email'"> email = #{value} </when>
			<when test="column == 'birth'"> birth = #{value} </when>
		</choose>
		WHERE user_id = #{userId}
	</update>

	<select id="loginUser" parameterType="map"
		resultType="dto.user.User">
		SELECT user_id, name, is_seller, birth, deleted
		FROM User
		WHERE user_id = #{userId} AND
		password = #{password}
	</select>

	<select id="findUserId" parameterType="map" resultType="string">
		SELECT
		user_id
		FROM User
		WHERE name = #{name}
		AND email = #{email}
		AND phone =
		#{phone}
		LIMIT 1
	</select>

	<select id="findUserForPasswordReset" resultType="user">
		SELECT *
		FROM
		User
		WHERE name = #{name}
		AND user_id = #{userId}
		AND email = #{email}
	</select>

	<update id="withdrawUser" parameterType="user">
		update user
		set deleted =
		#{deleted, jdbcType=BOOLEAN},
		withdrawal_reason = #{withdrawalReason},
		withdrawal_detail = #{withdrawalDetail}
		where user_id = #{userId}
	</update>

	<update id="updateUserPassword" parameterType="map">
		UPDATE user
		SET
		password = #{newPassword}
		WHERE user_id = #{userId}
	</update>

	<select id="selectLikedProducts" resultType="likelist">
		SELECT l.like_id AS
		likeId,
		l.product_id AS productId,
		l.user_id AS userId,
		p.name,
		p.price,
		p.main_image1 AS mainImage1,
		p.description1 AS detail
		FROM likelist l
		JOIN product p ON l.product_id = p.product_id
		WHERE l.user_id =
		#{userId}
		ORDER BY l.like_id DESC
		LIMIT #{limit} OFFSET #{offset}
	</select>

	<select id="countLikedProducts" resultType="int">
		SELECT COUNT(*) FROM
		likelist WHERE user_id = #{userId}
	</select>


	<select id="findById" parameterType="String" resultType="user">
		SELECT *
		FROM user WHERE user_id = #{userId}
	</select>

	<select id="findByMemberNo" parameterType="int"
		resultType="user">
		SELECT * FROM user WHERE member_no = #{memberNo}
	</select>

	<select id="selectAllInquiries" resultType="dto.user.Inquiry">
		SELECT * FROM inquiry
		ORDER BY question_date DESC
	</select>

	<select id="selectInquiryById" resultType="dto.user.Inquiry"
		parameterType="int">
		SELECT * FROM inquiry WHERE inquiry_id = #{inquiryId}
	</select>

	<insert id="insertInquiry" parameterType="dto.user.Inquiry">
		INSERT INTO inquiry
		(title, content, user_id, type, status, question_date,
		product_id)
		VALUES (#{title}, #{content}, #{userId}, #{type}, #{status},
		#{questionDate}, #{productId})
	</insert>

	<update id="updateInquiryAnswer" parameterType="map">
		UPDATE inquiry
		SET answer = #{answer}, status = '답변 완료' WHERE inquiry_id =
		#{inquiryId}
	</update>

	<delete id="deleteLikeById" parameterType="int">
		DELETE from likelist
		where like_id = #{likeId}
	</delete>

	<insert id="insertReview" parameterType="review">
		INSERT INTO review
      (content, image, user_id, product_id, reg_date, rating, order_item_id)
    VALUES
      (#{content}, #{image}, #{userId}, #{productId}, NOW(), #{rating}, #{orderItemId})
	</insert>
	
	<!-- 특정 주문 아이템에 이미 후기가 있는지 체크 -->
  <select id="countReviewByOrderItem" parameterType="int" resultType="int">
    SELECT COUNT(*) 
      FROM review 
     WHERE order_item_id = #{orderItemId}
  </select>

	<select id="getReviewsByUserId" resultType="review">
		SELECT
		r.review_id AS
		reviewId,
		r.content,
		r.image,
		r.user_id AS userId,
		r.product_id AS
		productId,
		r.reg_date AS regDate,
		r.rating,
		p.name AS productName,

		(SELECT oi.color
		FROM orderitem oi
		WHERE oi.product_id = r.product_id
		LIMIT 1) AS color,

		(SELECT oi.size
		FROM orderitem oi
		WHERE oi.product_id
		= r.product_id
		LIMIT 1) AS size,

		(SELECT ol.order_date
		FROM orderlist ol
		WHERE ol.order_id = (
		SELECT oi.order_id
		FROM orderitem oi
		WHERE
		oi.product_id = r.product_id
		LIMIT 1
		)
		LIMIT 1) AS orderDate

		FROM review r
		JOIN product p ON r.product_id = p.product_id
		WHERE r.user_id =
		#{userId}
		ORDER BY r.reg_date DESC
	</select>

	<select id="selectReviewCount" resultType="Integer">
		select count(*) from
		review;
	</select>
	
	<select id="getReviewById" parameterType="int" resultType="review">
  SELECT 
    r.review_id      AS reviewId,
    r.content,
    r.image,
    r.user_id        AS userId,
    r.product_id     AS productId,
    r.reg_date       AS regDate,
    r.rating,
    p.name           AS productName,
    p.main_image1    AS productImage,
    oi.color,
    oi.size,
    ol.order_date    AS orderDate
  FROM review r
    JOIN orderitem     oi ON r.order_item_id = oi.order_item_id
    JOIN product       p  ON r.product_id    = p.product_id
    JOIN orderlist     ol ON oi.order_id      = ol.order_id
  WHERE r.review_id = #{reviewId}
</select>


	<update id="updateReview" parameterType="review">
		UPDATE review
		SET
		content
		= #{content},
		image = #{image},
		rating = #{rating}
		WHERE review_id =
		#{reviewId}
	</update>

	<delete id="deleteReview" parameterType="int">
		DELETE FROM review WHERE
		review_id = #{reviewId}
	</delete>

	<select id="getPointsByUserAndDate" parameterType="map"
		resultType="point">
		SELECT
		point_id AS pointId,
		date,
		point,
		order_id AS orderId,
		user_id AS
		userId
		FROM point
		WHERE user_id = #{userId}
		<if test="startDate != null and endDate != null">
			AND date BETWEEN #{startDate} AND #{endDate}
		</if>
		ORDER BY date DESC
	</select>

	<select id="findByName" parameterType="java.lang.String"
		resultType="dto.user.User">
		SELECT * FROM `user` WHERE name = #{name}
	</select>
	
	<insert id="insertKakaoUser" parameterType="dto.user.User">
  INSERT INTO user
  (user_id, password, name, phone, email, birth, deleted, join_date, is_seller, total_point)
  VALUES
  (#{userId}, NULL, #{name}, NULL, #{email}, NULL, 0, NOW(), 0, 0)
</insert>
<!--  배송지 관리 쿼리 -->

<select id="selectAddressesByUserId" parameterType="string" resultType="user">
    SELECT address1,
           address1_detail,
           address2,
           address2_detail,
           address3,
           address3_detail
      FROM `user`
     WHERE user_id = #{userId}
  </select>
	  
	  <!-- 2) 배송지 추가/수정: 주소 칸 별로 사용 -->
  <update id="updateAddress1" parameterType="dto.user.User">
    UPDATE `user`
       SET address1        = #{address1},
           address1_detail = #{address1Detail}
     WHERE user_id = #{userId}
  </update>
  
  <update id="updateAddress2" parameterType="dto.user.User">
    UPDATE `user`
       SET address2        = #{address2},
           address2_detail = #{address2Detail}
     WHERE user_id = #{userId}
  </update>

  <update id="updateAddress3" parameterType="dto.user.User">
    UPDATE `user`
       SET address3        = #{address3},
           address3_detail = #{address3Detail}
     WHERE user_id = #{userId}
  </update>

  <!-- 3) 배송지 삭제: NULL 처리 -->
  <update id="deleteAddress1" parameterType="string">
    UPDATE `user`
       SET address1 = NULL,
           address1_detail = NULL
     WHERE user_id = #{userId}
  </update>

  <update id="deleteAddress2" parameterType="string">
    UPDATE `user`
       SET address2 = NULL,
           address2_detail = NULL
     WHERE user_id = #{userId}
  </update>

  <update id="deleteAddress3" parameterType="string">
    UPDATE `user`
       SET address3 = NULL,
           address3_detail = NULL
     WHERE user_id = #{userId}
  </update>

</mapper>